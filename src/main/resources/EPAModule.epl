module EPAModule;

//import event classes
import de.hsaugsburg.cep.model.*; 

// TODO generate useful event id for all events
// TODO Ereignisse konsumieren oder Zeitfenster?
// TODO eventId und itemId korrekt vergeben

@Name("DetectMoveEvent")
@Description("Detects a movement of a component")
insert into ItemMovedEvent
select 'TestMoveEvent' as eventId,
	toSensor.timestamp as timestamp,
	'SomeItem' as itemId,
	fromSensor.sensorId as sourceId,
	toSensor.sensorId as targetId
	from pattern[every fromSensor=SensorEvent(state=false) -> toSensor=SensorEvent(state=true)]
	where isNeighbour(fromSensor.sensorId, toSensor.sensorId);
	
@Name("DetectItemsChangedEvent")
@Description("Detects when a work item enters or leaves the industrial plant.")
insert into ItemsChangedEvent
select 'NewItemsChangedEvent' as eventId,
	timestamp as timestamp,
	'SomeItem' as itemId,
	getChangeSensorType(sensorId) as changeType
	from SensorEvent(state=true)
	where isChangeSensor(sensorId);

@Name("DetectWorkEvent")
@Description("Detects when a work item is being in manufactured by a machine.")
insert into WorkEvent
select 'NewWorkEvent' as eventId,
	timestamp as timestamp,
	'SomeItem' as itemId,
	getMachineId(sensorId) as workerId,
	getMachineWorkType(sensorId) as work
	from SensorEvent(state=true)
	where isMachineSensor(sensorId);

@Name("AllSensorEvents")
@Description("Detects all sensor events")
select * from SensorEvent;

@Name("AllMoveEvents")
@Description("Listens to all new ItemMovedEvent")
select * from ItemMovedEvent;

@Name("AllWorkEvents")
@Description("Listens to all new WorkEvent")
select * from WorkEvent;

@Name("AllItemsChangedEvent")
@Description("Listens to all new ItemsChangedEvent")
select * from ItemsChangedEvent;
